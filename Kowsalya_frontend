// ==============================
// Backend: Express + PostgreSQL
// ==============================

// server.js
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const JWT_SECRET = process.env.JWT_SECRET;

// Middleware
function authenticateToken(req, res, next) {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// ============ AUTH =============
app.post('/api/auth/signup', async (req, res) => {
  const { email, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  const result = await pool.query('INSERT INTO users (email, password) VALUES ($1, $2) RETURNING *', [email, hash]);
  res.json(result.rows[0]);
});

app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
  const user = result.rows[0];
  if (!user || !(await bcrypt.compare(password, user.password))) return res.status(401).json({ error: 'Invalid' });
  const token = jwt.sign({ id: user.id }, JWT_SECRET);
  res.json({ token });
});

// ============ COMPANIES =============
app.post('/api/companies', authenticateToken, async (req, res) => {
  const { name, industry, description, logo_url } = req.body;
  const result = await pool.query(
    'INSERT INTO companies (user_id, name, industry, description, logo_url) VALUES ($1, $2, $3, $4, $5) RETURNING *',
    [req.user.id, name, industry, description, logo_url]
  );
  res.json(result.rows[0]);
});

app.get('/api/companies/:id', async (req, res) => {
  const result = await pool.query('SELECT * FROM companies WHERE id = $1', [req.params.id]);
  res.json(result.rows[0]);
});

// ============ TENDERS =============
app.post('/api/tenders', authenticateToken, async (req, res) => {
  const { company_id, title, description, deadline, budget } = req.body;
  const result = await pool.query(
    'INSERT INTO tenders (company_id, title, description, deadline, budget) VALUES ($1, $2, $3, $4, $5) RETURNING *',
    [company_id, title, description, deadline, budget]
  );
  res.json(result.rows[0]);
});

app.get('/api/tenders', async (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  const offset = (page - 1) * limit;
  const result = await pool.query('SELECT * FROM tenders ORDER BY created_at DESC LIMIT $1 OFFSET $2', [limit, offset]);
  res.json(result.rows);
});

app.get('/api/tenders/company/:id', async (req, res) => {
  const result = await pool.query('SELECT * FROM tenders WHERE company_id = $1', [req.params.id]);
  res.json(result.rows);
});

// ============ SERVER =============
app.listen(3001, () => console.log('Server running on port 3001'));

// ==============================
// Frontend and Supabase logic
// ==============================

// Frontend: Upload image to Supabase example (React)
import { createClient } from '@supabase/supabase-js';

const supabase = createClient('https://YOUR_PROJECT.supabase.co', 'YOUR_PUBLIC_ANON_KEY');

const uploadLogo = async (file) => {
  const { data, error } = await supabase.storage.from('company-logos').upload(`logos/${file.name}`, file);
  if (error) throw error;
  const { publicURL } = supabase.storage.from('company-logos').getPublicUrl(data.path);
  return publicURL;
};

// Call `uploadLogo` in a form handler, then send logo_url to backend

// ==============================
// Sample SQL Schema
// ==============================

-- users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- companies table
CREATE TABLE companies (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  name VARCHAR(255),
  industry VARCHAR(255),
  description TEXT,
  logo_url TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- tenders table
CREATE TABLE tenders (
  id SERIAL PRIMARY KEY,
  company_id INTEGER REFERENCES companies(id),
  title VARCHAR(255),
  description TEXT,
  deadline DATE,
  budget NUMERIC,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
